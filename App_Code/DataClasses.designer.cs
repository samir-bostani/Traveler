#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="TravelerMonitoring")]
public partial class DataClassesDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertTblPriority(TblPriority instance);
  partial void UpdateTblPriority(TblPriority instance);
  partial void DeleteTblPriority(TblPriority instance);
  partial void InsertTblProcess(TblProcess instance);
  partial void UpdateTblProcess(TblProcess instance);
  partial void DeleteTblProcess(TblProcess instance);
  partial void InsertTblStatus(TblStatus instance);
  partial void UpdateTblStatus(TblStatus instance);
  partial void DeleteTblStatus(TblStatus instance);
  partial void InsertTblTravelerProcess(TblTravelerProcess instance);
  partial void UpdateTblTravelerProcess(TblTravelerProcess instance);
  partial void DeleteTblTravelerProcess(TblTravelerProcess instance);
  partial void InsertTblUserAccessLevel(TblUserAccessLevel instance);
  partial void UpdateTblUserAccessLevel(TblUserAccessLevel instance);
  partial void DeleteTblUserAccessLevel(TblUserAccessLevel instance);
  partial void InsertTblUserName(TblUserName instance);
  partial void UpdateTblUserName(TblUserName instance);
  partial void DeleteTblUserName(TblUserName instance);
  partial void InsertTblAccessLevel(TblAccessLevel instance);
  partial void UpdateTblAccessLevel(TblAccessLevel instance);
  partial void DeleteTblAccessLevel(TblAccessLevel instance);
  partial void InsertTblTraveler(TblTraveler instance);
  partial void UpdateTblTraveler(TblTraveler instance);
  partial void DeleteTblTraveler(TblTraveler instance);
  #endregion
	
	public DataClassesDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["TravelerMonitoringConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<TblPriority> TblPriorities
	{
		get
		{
			return this.GetTable<TblPriority>();
		}
	}
	
	public System.Data.Linq.Table<TblProcess> TblProcesses
	{
		get
		{
			return this.GetTable<TblProcess>();
		}
	}
	
	public System.Data.Linq.Table<TblStatus> TblStatus
	{
		get
		{
			return this.GetTable<TblStatus>();
		}
	}
	
	public System.Data.Linq.Table<TblTravelerProcess> TblTravelerProcesses
	{
		get
		{
			return this.GetTable<TblTravelerProcess>();
		}
	}
	
	public System.Data.Linq.Table<TblUserAccessLevel> TblUserAccessLevels
	{
		get
		{
			return this.GetTable<TblUserAccessLevel>();
		}
	}
	
	public System.Data.Linq.Table<TblUserName> TblUserNames
	{
		get
		{
			return this.GetTable<TblUserName>();
		}
	}
	
	public System.Data.Linq.Table<TblAccessLevel> TblAccessLevels
	{
		get
		{
			return this.GetTable<TblAccessLevel>();
		}
	}
	
	public System.Data.Linq.Table<TblTraveler> TblTravelers
	{
		get
		{
			return this.GetTable<TblTraveler>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TblPriority")]
public partial class TblPriority : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _AutoID;
	
	private string _Priority;
	
	private string _PriorityAlphabet;
	
	private EntitySet<TblTraveler> _TblTravelers;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAutoIDChanging(int value);
    partial void OnAutoIDChanged();
    partial void OnPriorityChanging(string value);
    partial void OnPriorityChanged();
    partial void OnPriorityAlphabetChanging(string value);
    partial void OnPriorityAlphabetChanged();
    #endregion
	
	public TblPriority()
	{
		this._TblTravelers = new EntitySet<TblTraveler>(new Action<TblTraveler>(this.attach_TblTravelers), new Action<TblTraveler>(this.detach_TblTravelers));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AutoID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int AutoID
	{
		get
		{
			return this._AutoID;
		}
		set
		{
			if ((this._AutoID != value))
			{
				this.OnAutoIDChanging(value);
				this.SendPropertyChanging();
				this._AutoID = value;
				this.SendPropertyChanged("AutoID");
				this.OnAutoIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Priority", DbType="NVarChar(50)")]
	public string Priority
	{
		get
		{
			return this._Priority;
		}
		set
		{
			if ((this._Priority != value))
			{
				this.OnPriorityChanging(value);
				this.SendPropertyChanging();
				this._Priority = value;
				this.SendPropertyChanged("Priority");
				this.OnPriorityChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriorityAlphabet", DbType="NVarChar(1)")]
	public string PriorityAlphabet
	{
		get
		{
			return this._PriorityAlphabet;
		}
		set
		{
			if ((this._PriorityAlphabet != value))
			{
				this.OnPriorityAlphabetChanging(value);
				this.SendPropertyChanging();
				this._PriorityAlphabet = value;
				this.SendPropertyChanged("PriorityAlphabet");
				this.OnPriorityAlphabetChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblPriority_TblTraveler", Storage="_TblTravelers", ThisKey="AutoID", OtherKey="Priority")]
	public EntitySet<TblTraveler> TblTravelers
	{
		get
		{
			return this._TblTravelers;
		}
		set
		{
			this._TblTravelers.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_TblTravelers(TblTraveler entity)
	{
		this.SendPropertyChanging();
		entity.TblPriority = this;
	}
	
	private void detach_TblTravelers(TblTraveler entity)
	{
		this.SendPropertyChanging();
		entity.TblPriority = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TblProcess")]
public partial class TblProcess : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _AutoID;
	
	private string _Process;
	
	private EntitySet<TblTravelerProcess> _TblTravelerProcesses;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAutoIDChanging(int value);
    partial void OnAutoIDChanged();
    partial void OnProcessChanging(string value);
    partial void OnProcessChanged();
    #endregion
	
	public TblProcess()
	{
		this._TblTravelerProcesses = new EntitySet<TblTravelerProcess>(new Action<TblTravelerProcess>(this.attach_TblTravelerProcesses), new Action<TblTravelerProcess>(this.detach_TblTravelerProcesses));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AutoID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int AutoID
	{
		get
		{
			return this._AutoID;
		}
		set
		{
			if ((this._AutoID != value))
			{
				this.OnAutoIDChanging(value);
				this.SendPropertyChanging();
				this._AutoID = value;
				this.SendPropertyChanged("AutoID");
				this.OnAutoIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Process", DbType="NVarChar(200)")]
	public string Process
	{
		get
		{
			return this._Process;
		}
		set
		{
			if ((this._Process != value))
			{
				this.OnProcessChanging(value);
				this.SendPropertyChanging();
				this._Process = value;
				this.SendPropertyChanged("Process");
				this.OnProcessChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblProcess_TblTravelerProcess", Storage="_TblTravelerProcesses", ThisKey="AutoID", OtherKey="ProcessAutoID")]
	public EntitySet<TblTravelerProcess> TblTravelerProcesses
	{
		get
		{
			return this._TblTravelerProcesses;
		}
		set
		{
			this._TblTravelerProcesses.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_TblTravelerProcesses(TblTravelerProcess entity)
	{
		this.SendPropertyChanging();
		entity.TblProcess = this;
	}
	
	private void detach_TblTravelerProcesses(TblTravelerProcess entity)
	{
		this.SendPropertyChanging();
		entity.TblProcess = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TblStatus")]
public partial class TblStatus : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _AutoID;
	
	private string _Status;
	
	private EntitySet<TblTraveler> _TblTravelers;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAutoIDChanging(int value);
    partial void OnAutoIDChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    #endregion
	
	public TblStatus()
	{
		this._TblTravelers = new EntitySet<TblTraveler>(new Action<TblTraveler>(this.attach_TblTravelers), new Action<TblTraveler>(this.detach_TblTravelers));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AutoID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int AutoID
	{
		get
		{
			return this._AutoID;
		}
		set
		{
			if ((this._AutoID != value))
			{
				this.OnAutoIDChanging(value);
				this.SendPropertyChanging();
				this._AutoID = value;
				this.SendPropertyChanged("AutoID");
				this.OnAutoIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NVarChar(50)")]
	public string Status
	{
		get
		{
			return this._Status;
		}
		set
		{
			if ((this._Status != value))
			{
				this.OnStatusChanging(value);
				this.SendPropertyChanging();
				this._Status = value;
				this.SendPropertyChanged("Status");
				this.OnStatusChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblStatus_TblTraveler", Storage="_TblTravelers", ThisKey="AutoID", OtherKey="Status")]
	public EntitySet<TblTraveler> TblTravelers
	{
		get
		{
			return this._TblTravelers;
		}
		set
		{
			this._TblTravelers.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_TblTravelers(TblTraveler entity)
	{
		this.SendPropertyChanging();
		entity.TblStatus = this;
	}
	
	private void detach_TblTravelers(TblTraveler entity)
	{
		this.SendPropertyChanging();
		entity.TblStatus = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TblTravelerProcess")]
public partial class TblTravelerProcess : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _AutoID;
	
	private System.Nullable<int> _TravelerAutoID;
	
	private System.Nullable<int> _ProcessAutoID;
	
	private System.Nullable<System.DateTime> _DateIn;
	
	private System.Nullable<System.DateTime> _DateOut;
	
	private EntityRef<TblProcess> _TblProcess;
	
	private EntityRef<TblTraveler> _TblTraveler;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAutoIDChanging(int value);
    partial void OnAutoIDChanged();
    partial void OnTravelerAutoIDChanging(System.Nullable<int> value);
    partial void OnTravelerAutoIDChanged();
    partial void OnProcessAutoIDChanging(System.Nullable<int> value);
    partial void OnProcessAutoIDChanged();
    partial void OnDateInChanging(System.Nullable<System.DateTime> value);
    partial void OnDateInChanged();
    partial void OnDateOutChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOutChanged();
    #endregion
	
	public TblTravelerProcess()
	{
		this._TblProcess = default(EntityRef<TblProcess>);
		this._TblTraveler = default(EntityRef<TblTraveler>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AutoID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int AutoID
	{
		get
		{
			return this._AutoID;
		}
		set
		{
			if ((this._AutoID != value))
			{
				this.OnAutoIDChanging(value);
				this.SendPropertyChanging();
				this._AutoID = value;
				this.SendPropertyChanged("AutoID");
				this.OnAutoIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TravelerAutoID", DbType="Int")]
	public System.Nullable<int> TravelerAutoID
	{
		get
		{
			return this._TravelerAutoID;
		}
		set
		{
			if ((this._TravelerAutoID != value))
			{
				if (this._TblTraveler.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnTravelerAutoIDChanging(value);
				this.SendPropertyChanging();
				this._TravelerAutoID = value;
				this.SendPropertyChanged("TravelerAutoID");
				this.OnTravelerAutoIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProcessAutoID", DbType="Int")]
	public System.Nullable<int> ProcessAutoID
	{
		get
		{
			return this._ProcessAutoID;
		}
		set
		{
			if ((this._ProcessAutoID != value))
			{
				if (this._TblProcess.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnProcessAutoIDChanging(value);
				this.SendPropertyChanging();
				this._ProcessAutoID = value;
				this.SendPropertyChanged("ProcessAutoID");
				this.OnProcessAutoIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateIn", DbType="Date")]
	public System.Nullable<System.DateTime> DateIn
	{
		get
		{
			return this._DateIn;
		}
		set
		{
			if ((this._DateIn != value))
			{
				this.OnDateInChanging(value);
				this.SendPropertyChanging();
				this._DateIn = value;
				this.SendPropertyChanged("DateIn");
				this.OnDateInChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOut", DbType="Date")]
	public System.Nullable<System.DateTime> DateOut
	{
		get
		{
			return this._DateOut;
		}
		set
		{
			if ((this._DateOut != value))
			{
				this.OnDateOutChanging(value);
				this.SendPropertyChanging();
				this._DateOut = value;
				this.SendPropertyChanged("DateOut");
				this.OnDateOutChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblProcess_TblTravelerProcess", Storage="_TblProcess", ThisKey="ProcessAutoID", OtherKey="AutoID", IsForeignKey=true)]
	public TblProcess TblProcess
	{
		get
		{
			return this._TblProcess.Entity;
		}
		set
		{
			TblProcess previousValue = this._TblProcess.Entity;
			if (((previousValue != value) 
						|| (this._TblProcess.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._TblProcess.Entity = null;
					previousValue.TblTravelerProcesses.Remove(this);
				}
				this._TblProcess.Entity = value;
				if ((value != null))
				{
					value.TblTravelerProcesses.Add(this);
					this._ProcessAutoID = value.AutoID;
				}
				else
				{
					this._ProcessAutoID = default(Nullable<int>);
				}
				this.SendPropertyChanged("TblProcess");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblTraveler_TblTravelerProcess", Storage="_TblTraveler", ThisKey="TravelerAutoID", OtherKey="AutoID", IsForeignKey=true)]
	public TblTraveler TblTraveler
	{
		get
		{
			return this._TblTraveler.Entity;
		}
		set
		{
			TblTraveler previousValue = this._TblTraveler.Entity;
			if (((previousValue != value) 
						|| (this._TblTraveler.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._TblTraveler.Entity = null;
					previousValue.TblTravelerProcesses.Remove(this);
				}
				this._TblTraveler.Entity = value;
				if ((value != null))
				{
					value.TblTravelerProcesses.Add(this);
					this._TravelerAutoID = value.AutoID;
				}
				else
				{
					this._TravelerAutoID = default(Nullable<int>);
				}
				this.SendPropertyChanged("TblTraveler");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TblUserAccessLevel")]
public partial class TblUserAccessLevel : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _AutoID;
	
	private System.Nullable<int> _UserID;
	
	private System.Nullable<int> _AccessLevelID;
	
	private EntityRef<TblUserName> _TblUserName;
	
	private EntityRef<TblAccessLevel> _TblAccessLevel;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAutoIDChanging(int value);
    partial void OnAutoIDChanged();
    partial void OnUserIDChanging(System.Nullable<int> value);
    partial void OnUserIDChanged();
    partial void OnAccessLevelIDChanging(System.Nullable<int> value);
    partial void OnAccessLevelIDChanged();
    #endregion
	
	public TblUserAccessLevel()
	{
		this._TblUserName = default(EntityRef<TblUserName>);
		this._TblAccessLevel = default(EntityRef<TblAccessLevel>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AutoID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int AutoID
	{
		get
		{
			return this._AutoID;
		}
		set
		{
			if ((this._AutoID != value))
			{
				this.OnAutoIDChanging(value);
				this.SendPropertyChanging();
				this._AutoID = value;
				this.SendPropertyChanged("AutoID");
				this.OnAutoIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int")]
	public System.Nullable<int> UserID
	{
		get
		{
			return this._UserID;
		}
		set
		{
			if ((this._UserID != value))
			{
				if (this._TblUserName.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnUserIDChanging(value);
				this.SendPropertyChanging();
				this._UserID = value;
				this.SendPropertyChanged("UserID");
				this.OnUserIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessLevelID", DbType="Int")]
	public System.Nullable<int> AccessLevelID
	{
		get
		{
			return this._AccessLevelID;
		}
		set
		{
			if ((this._AccessLevelID != value))
			{
				if (this._TblAccessLevel.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnAccessLevelIDChanging(value);
				this.SendPropertyChanging();
				this._AccessLevelID = value;
				this.SendPropertyChanged("AccessLevelID");
				this.OnAccessLevelIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblUserName_TblUserAccessLevel", Storage="_TblUserName", ThisKey="UserID", OtherKey="AutoID", IsForeignKey=true)]
	public TblUserName TblUserName
	{
		get
		{
			return this._TblUserName.Entity;
		}
		set
		{
			TblUserName previousValue = this._TblUserName.Entity;
			if (((previousValue != value) 
						|| (this._TblUserName.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._TblUserName.Entity = null;
					previousValue.TblUserAccessLevels.Remove(this);
				}
				this._TblUserName.Entity = value;
				if ((value != null))
				{
					value.TblUserAccessLevels.Add(this);
					this._UserID = value.AutoID;
				}
				else
				{
					this._UserID = default(Nullable<int>);
				}
				this.SendPropertyChanged("TblUserName");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblAccessLevel_TblUserAccessLevel", Storage="_TblAccessLevel", ThisKey="AccessLevelID", OtherKey="AutoID", IsForeignKey=true)]
	public TblAccessLevel TblAccessLevel
	{
		get
		{
			return this._TblAccessLevel.Entity;
		}
		set
		{
			TblAccessLevel previousValue = this._TblAccessLevel.Entity;
			if (((previousValue != value) 
						|| (this._TblAccessLevel.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._TblAccessLevel.Entity = null;
					previousValue.TblUserAccessLevels.Remove(this);
				}
				this._TblAccessLevel.Entity = value;
				if ((value != null))
				{
					value.TblUserAccessLevels.Add(this);
					this._AccessLevelID = value.AutoID;
				}
				else
				{
					this._AccessLevelID = default(Nullable<int>);
				}
				this.SendPropertyChanged("TblAccessLevel");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TblUserName")]
public partial class TblUserName : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _AutoID;
	
	private string _UserName;
	
	private string _Password;
	
	private EntitySet<TblUserAccessLevel> _TblUserAccessLevels;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAutoIDChanging(int value);
    partial void OnAutoIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
	
	public TblUserName()
	{
		this._TblUserAccessLevels = new EntitySet<TblUserAccessLevel>(new Action<TblUserAccessLevel>(this.attach_TblUserAccessLevels), new Action<TblUserAccessLevel>(this.detach_TblUserAccessLevels));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AutoID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int AutoID
	{
		get
		{
			return this._AutoID;
		}
		set
		{
			if ((this._AutoID != value))
			{
				this.OnAutoIDChanging(value);
				this.SendPropertyChanging();
				this._AutoID = value;
				this.SendPropertyChanged("AutoID");
				this.OnAutoIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(50)")]
	public string UserName
	{
		get
		{
			return this._UserName;
		}
		set
		{
			if ((this._UserName != value))
			{
				this.OnUserNameChanging(value);
				this.SendPropertyChanging();
				this._UserName = value;
				this.SendPropertyChanged("UserName");
				this.OnUserNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(50)")]
	public string Password
	{
		get
		{
			return this._Password;
		}
		set
		{
			if ((this._Password != value))
			{
				this.OnPasswordChanging(value);
				this.SendPropertyChanging();
				this._Password = value;
				this.SendPropertyChanged("Password");
				this.OnPasswordChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblUserName_TblUserAccessLevel", Storage="_TblUserAccessLevels", ThisKey="AutoID", OtherKey="UserID")]
	public EntitySet<TblUserAccessLevel> TblUserAccessLevels
	{
		get
		{
			return this._TblUserAccessLevels;
		}
		set
		{
			this._TblUserAccessLevels.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_TblUserAccessLevels(TblUserAccessLevel entity)
	{
		this.SendPropertyChanging();
		entity.TblUserName = this;
	}
	
	private void detach_TblUserAccessLevels(TblUserAccessLevel entity)
	{
		this.SendPropertyChanging();
		entity.TblUserName = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TblAccessLevel")]
public partial class TblAccessLevel : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _AutoID;
	
	private string _AccessLevel;
	
	private EntitySet<TblUserAccessLevel> _TblUserAccessLevels;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAutoIDChanging(int value);
    partial void OnAutoIDChanged();
    partial void OnAccessLevelChanging(string value);
    partial void OnAccessLevelChanged();
    #endregion
	
	public TblAccessLevel()
	{
		this._TblUserAccessLevels = new EntitySet<TblUserAccessLevel>(new Action<TblUserAccessLevel>(this.attach_TblUserAccessLevels), new Action<TblUserAccessLevel>(this.detach_TblUserAccessLevels));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AutoID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int AutoID
	{
		get
		{
			return this._AutoID;
		}
		set
		{
			if ((this._AutoID != value))
			{
				this.OnAutoIDChanging(value);
				this.SendPropertyChanging();
				this._AutoID = value;
				this.SendPropertyChanged("AutoID");
				this.OnAutoIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessLevel", DbType="NVarChar(50)")]
	public string AccessLevel
	{
		get
		{
			return this._AccessLevel;
		}
		set
		{
			if ((this._AccessLevel != value))
			{
				this.OnAccessLevelChanging(value);
				this.SendPropertyChanging();
				this._AccessLevel = value;
				this.SendPropertyChanged("AccessLevel");
				this.OnAccessLevelChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblAccessLevel_TblUserAccessLevel", Storage="_TblUserAccessLevels", ThisKey="AutoID", OtherKey="AccessLevelID")]
	public EntitySet<TblUserAccessLevel> TblUserAccessLevels
	{
		get
		{
			return this._TblUserAccessLevels;
		}
		set
		{
			this._TblUserAccessLevels.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_TblUserAccessLevels(TblUserAccessLevel entity)
	{
		this.SendPropertyChanging();
		entity.TblAccessLevel = this;
	}
	
	private void detach_TblUserAccessLevels(TblUserAccessLevel entity)
	{
		this.SendPropertyChanging();
		entity.TblAccessLevel = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TblTraveler")]
public partial class TblTraveler : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _AutoID;
	
	private string _TravelerNo;
	
	private System.Nullable<int> _Priority;
	
	private System.Nullable<System.DateTime> _OrderDate;
	
	private System.Nullable<int> _Status;
	
	private string _JobDescription;
	
	private System.Nullable<System.DateTime> _EditedDate;
	
	private System.Nullable<bool> _Finished;
	
	private EntitySet<TblTravelerProcess> _TblTravelerProcesses;
	
	private EntityRef<TblStatus> _TblStatus;
	
	private EntityRef<TblPriority> _TblPriority;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAutoIDChanging(int value);
    partial void OnAutoIDChanged();
    partial void OnTravelerNoChanging(string value);
    partial void OnTravelerNoChanged();
    partial void OnPriorityChanging(System.Nullable<int> value);
    partial void OnPriorityChanged();
    partial void OnOrderDateChanging(System.Nullable<System.DateTime> value);
    partial void OnOrderDateChanged();
    partial void OnStatusChanging(System.Nullable<int> value);
    partial void OnStatusChanged();
    partial void OnJobDescriptionChanging(string value);
    partial void OnJobDescriptionChanged();
    partial void OnEditedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEditedDateChanged();
    partial void OnFinishedChanging(System.Nullable<bool> value);
    partial void OnFinishedChanged();
    #endregion
	
	public TblTraveler()
	{
		this._TblTravelerProcesses = new EntitySet<TblTravelerProcess>(new Action<TblTravelerProcess>(this.attach_TblTravelerProcesses), new Action<TblTravelerProcess>(this.detach_TblTravelerProcesses));
		this._TblStatus = default(EntityRef<TblStatus>);
		this._TblPriority = default(EntityRef<TblPriority>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AutoID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int AutoID
	{
		get
		{
			return this._AutoID;
		}
		set
		{
			if ((this._AutoID != value))
			{
				this.OnAutoIDChanging(value);
				this.SendPropertyChanging();
				this._AutoID = value;
				this.SendPropertyChanged("AutoID");
				this.OnAutoIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TravelerNo", DbType="NVarChar(100)")]
	public string TravelerNo
	{
		get
		{
			return this._TravelerNo;
		}
		set
		{
			if ((this._TravelerNo != value))
			{
				this.OnTravelerNoChanging(value);
				this.SendPropertyChanging();
				this._TravelerNo = value;
				this.SendPropertyChanged("TravelerNo");
				this.OnTravelerNoChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Priority", DbType="Int")]
	public System.Nullable<int> Priority
	{
		get
		{
			return this._Priority;
		}
		set
		{
			if ((this._Priority != value))
			{
				if (this._TblPriority.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPriorityChanging(value);
				this.SendPropertyChanging();
				this._Priority = value;
				this.SendPropertyChanged("Priority");
				this.OnPriorityChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderDate", DbType="Date")]
	public System.Nullable<System.DateTime> OrderDate
	{
		get
		{
			return this._OrderDate;
		}
		set
		{
			if ((this._OrderDate != value))
			{
				this.OnOrderDateChanging(value);
				this.SendPropertyChanging();
				this._OrderDate = value;
				this.SendPropertyChanged("OrderDate");
				this.OnOrderDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int")]
	public System.Nullable<int> Status
	{
		get
		{
			return this._Status;
		}
		set
		{
			if ((this._Status != value))
			{
				if (this._TblStatus.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnStatusChanging(value);
				this.SendPropertyChanging();
				this._Status = value;
				this.SendPropertyChanged("Status");
				this.OnStatusChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobDescription", DbType="NVarChar(500)")]
	public string JobDescription
	{
		get
		{
			return this._JobDescription;
		}
		set
		{
			if ((this._JobDescription != value))
			{
				this.OnJobDescriptionChanging(value);
				this.SendPropertyChanging();
				this._JobDescription = value;
				this.SendPropertyChanged("JobDescription");
				this.OnJobDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EditedDate", DbType="Date")]
	public System.Nullable<System.DateTime> EditedDate
	{
		get
		{
			return this._EditedDate;
		}
		set
		{
			if ((this._EditedDate != value))
			{
				this.OnEditedDateChanging(value);
				this.SendPropertyChanging();
				this._EditedDate = value;
				this.SendPropertyChanged("EditedDate");
				this.OnEditedDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Finished", DbType="Bit")]
	public System.Nullable<bool> Finished
	{
		get
		{
			return this._Finished;
		}
		set
		{
			if ((this._Finished != value))
			{
				this.OnFinishedChanging(value);
				this.SendPropertyChanging();
				this._Finished = value;
				this.SendPropertyChanged("Finished");
				this.OnFinishedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblTraveler_TblTravelerProcess", Storage="_TblTravelerProcesses", ThisKey="AutoID", OtherKey="TravelerAutoID")]
	public EntitySet<TblTravelerProcess> TblTravelerProcesses
	{
		get
		{
			return this._TblTravelerProcesses;
		}
		set
		{
			this._TblTravelerProcesses.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblStatus_TblTraveler", Storage="_TblStatus", ThisKey="Status", OtherKey="AutoID", IsForeignKey=true)]
	public TblStatus TblStatus
	{
		get
		{
			return this._TblStatus.Entity;
		}
		set
		{
			TblStatus previousValue = this._TblStatus.Entity;
			if (((previousValue != value) 
						|| (this._TblStatus.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._TblStatus.Entity = null;
					previousValue.TblTravelers.Remove(this);
				}
				this._TblStatus.Entity = value;
				if ((value != null))
				{
					value.TblTravelers.Add(this);
					this._Status = value.AutoID;
				}
				else
				{
					this._Status = default(Nullable<int>);
				}
				this.SendPropertyChanged("TblStatus");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblPriority_TblTraveler", Storage="_TblPriority", ThisKey="Priority", OtherKey="AutoID", IsForeignKey=true)]
	public TblPriority TblPriority
	{
		get
		{
			return this._TblPriority.Entity;
		}
		set
		{
			TblPriority previousValue = this._TblPriority.Entity;
			if (((previousValue != value) 
						|| (this._TblPriority.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._TblPriority.Entity = null;
					previousValue.TblTravelers.Remove(this);
				}
				this._TblPriority.Entity = value;
				if ((value != null))
				{
					value.TblTravelers.Add(this);
					this._Priority = value.AutoID;
				}
				else
				{
					this._Priority = default(Nullable<int>);
				}
				this.SendPropertyChanged("TblPriority");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_TblTravelerProcesses(TblTravelerProcess entity)
	{
		this.SendPropertyChanging();
		entity.TblTraveler = this;
	}
	
	private void detach_TblTravelerProcesses(TblTravelerProcess entity)
	{
		this.SendPropertyChanging();
		entity.TblTraveler = null;
	}
}
#pragma warning restore 1591
